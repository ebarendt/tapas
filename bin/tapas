#!/usr/bin/env ruby

$: << File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'nokogiri'
require 'optparse'
require 'yaml'
require 'tapas_server'

def extract_links_to_download(server, feed)
  xml_doc = Nokogiri::XML(feed)
  items = xml_doc.xpath('//item')
  items.map do |item|
    children = item.children
    title = (children / 'title').first.child.content
    description = (children / 'description').first.child.content
    description_doc = Nokogiri::HTML(description)
    links = description_doc.css('ul li a')

    links_to_download = links.each_with_object([]) do |link, memo|
      if link['href'] =~ /rubytapas.dpdcart.com\/subscriber\/download/
        memo << { filename: link.content, link: link['href'].gsub(/#{server}/, '') }
      end
    end

    { title: title, links: links_to_download }
  end
end

def download_episode(episode, tapas_server)
  Dir.mkdir("downloads") unless File.directory?("downloads")
  episode_title_slug = episode[:title].downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
  directory = File.join("downloads", episode_title_slug)
  return if episode[:links].empty? || File.directory?(directory)

  puts "Downloading #{episode[:title]}..."
  Dir.mkdir(directory)
  episode[:links].each do |link|
    tapas_server.save_file(directory, link[:filename], link[:link])
  end
end

options = { server: 'https://rubytapas.dpdcart.com' }
options.merge!(YAML.load_file(ENV['HOME'] + '/.tapas.yml'))
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on("-u USER", "Your username on the RubyTapas server") do |u|
    options[:username] = u
  end

  opts.on("-p PASSWORD", "Your password") do |p|
    options[:password] = p
  end
end.parse!

unless options[:username] && options[:password]
  puts "username and password are required"
  exit(1)
end

tapas_server = TapasServer.new(options[:server], options[:username], options[:password])
feed = tapas_server.fetch_feed
extract_links_to_download(options[:server], feed).each do |episode|
  download_episode(episode, tapas_server)
end
